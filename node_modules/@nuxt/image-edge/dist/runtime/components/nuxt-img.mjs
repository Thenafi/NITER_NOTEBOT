import { h, defineComponent, ref, computed, onMounted } from "vue";
import { appendHeader } from "h3";
import { useImage } from "../composables.mjs";
import { parseSize } from "../utils/index.mjs";
import { baseImageProps, useBaseImage } from "./_base.mjs";
import { useHead, useRequestEvent } from "#imports";
export const imgProps = {
  ...baseImageProps,
  placeholder: { type: [Boolean, String, Number, Array], default: void 0 }
};
export default defineComponent({
  name: "NuxtImg",
  props: imgProps,
  setup: (props, ctx) => {
    const $img = useImage();
    const _base = useBaseImage(props);
    const placeholderLoaded = ref(false);
    const sizes = computed(() => $img.getSizes(props.src, {
      ..._base.options.value,
      sizes: props.sizes,
      modifiers: {
        ..._base.modifiers.value,
        width: parseSize(props.width),
        height: parseSize(props.height)
      }
    }));
    const attrs = computed(() => {
      const attrs2 = _base.attrs.value;
      if (props.sizes) {
        attrs2.sizes = sizes.value.sizes;
        attrs2.srcset = sizes.value.srcset;
      }
      return attrs2;
    });
    const placeholder = computed(() => {
      let placeholder2 = props.placeholder;
      if (placeholder2 === "") {
        placeholder2 = true;
      }
      if (!placeholder2 || placeholderLoaded.value) {
        return false;
      }
      if (typeof placeholder2 === "string") {
        return placeholder2;
      }
      const size = Array.isArray(placeholder2) ? placeholder2 : typeof placeholder2 === "number" ? [placeholder2, placeholder2] : [10, 10];
      return $img(props.src, {
        ..._base.modifiers.value,
        width: size[0],
        height: size[1],
        quality: size[2] || 50
      }, _base.options.value);
    });
    const mainSrc = computed(
      () => props.sizes ? sizes.value.src : $img(props.src, _base.modifiers.value, _base.options.value)
    );
    const src = computed(() => placeholder.value ? placeholder.value : mainSrc.value);
    if (props.preload) {
      const isResponsive = Object.values(sizes.value).every((v) => v);
      useHead({
        link: [{
          rel: "preload",
          as: "image",
          ...!isResponsive ? { href: src.value } : {
            href: sizes.value.src,
            imagesizes: sizes.value.sizes,
            imagesrcset: sizes.value.srcset
          }
        }]
      });
    }
    if (process.server && process.env.prerender) {
      const sources = [
        src.value,
        ...(sizes.value.srcset || "").split(",").map((s) => s.split(" ")[0])
      ].filter((s) => s && s.includes("/_ipx/"));
      appendHeader(useRequestEvent(), "X-Nitro-Prerender", sources.join(","));
    }
    const imgEl = ref(null);
    onMounted(() => {
      if (placeholder.value) {
        const img = new Image();
        img.src = mainSrc.value;
        img.onload = () => {
          imgEl.value.src = mainSrc.value;
          placeholderLoaded.value = true;
        };
      }
    });
    return () => h("img", {
      ref: imgEl,
      key: src.value,
      src: src.value,
      ...attrs.value,
      ...ctx.attrs
    });
  }
});
