import * as _nuxt_schema from '@nuxt/schema';
import { PartytownConfig } from '@builder.io/partytown/integration';

type ExcludeFrom<G extends Record<string, any>, K> = Pick<G, {
    [P in keyof G]: NonNullable<G[P]> extends K ? never : P;
}[keyof G]>;
/** For more information read the full details at https://partytown.builder.io/configuration */
interface ModuleOptions extends ExcludeFrom<PartytownConfig, Function> {
    /**
     * When `true`, Partytown scripts are not minified. See the
     * [Debugging docs](https://partytown.builder.io/debugging) on how to enable more logging.
     *
     * @default true in development
     */
    debug: boolean;
    /**
     * Path (relative to your base URL) where the Partytown library should be served from.
     *
     * @default '~partytown'
     */
    lib: string;
    /**
     * Hook that is called to resolve URLs which can be used to modify URLs. The hook uses the API:
     * `resolveUrl(url: URL, location: URL, method: string)`. See
     * [Proxying Requests](https://partytown.builder.io/proxying-requests) for more information.
     *
     * This should be provided as a string, which will be inlined into a `<script>` tag.
     */
    resolveUrl?: string;
    /** This function should be provided as a string, which will be inlined into the partytown config */
    get?: string;
    /** This function should be provided as a string, which will be inlined into the partytown config */
    set?: string;
    /** This function should be provided as a string, which will be inlined into the partytown config */
    apply?: string;
}
declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { ModuleOptions, _default as default };
