import { join } from 'path';
import { promises } from 'fs';
import { genObjectFromRawEntries } from 'knitwork';
import { defineNuxtModule, isNuxt2, isNuxt3 } from '@nuxt/kit';
import { libDirPath, copyLibFiles } from '@builder.io/partytown/utils';
import { withLeadingSlash, withTrailingSlash, withoutTrailingSlash } from 'ufo';

const module = defineNuxtModule({
  meta: {
    name: "@nuxtjs/partytown",
    configKey: "partytown"
  },
  defaults: (nuxt) => ({
    debug: nuxt.options.dev,
    forward: [],
    lib: "~partytown"
  }),
  async setup(options, nuxt) {
    const fns = ["resolveUrl", "get", "set", "apply"];
    options.lib = withLeadingSlash(withTrailingSlash(options.lib));
    const rawConfig = Object.entries(options).map(
      ([key, value]) => [key, fns.includes(key) ? value : JSON.stringify(value)]
    );
    const renderedConfig = genObjectFromRawEntries(rawConfig).replace(/\s*\n\s*/g, " ");
    const partytownSnippet = await promises.readFile(join(libDirPath(), "partytown.js"), "utf-8");
    if (isNuxt2()) {
      const nuxt2Options = nuxt.options;
      nuxt2Options.head = nuxt2Options.head || {};
      nuxt2Options.head.__dangerouslyDisableSanitizersByTagID = nuxt2Options.head.__dangerouslyDisableSanitizersByTagID || {};
      nuxt2Options.head.__dangerouslyDisableSanitizersByTagID.partytown = ["innerHTML"];
      nuxt2Options.head.__dangerouslyDisableSanitizersByTagID["partytown-config"] = ["innerHTML"];
      nuxt2Options.head.script.unshift(
        { hid: "partytown-config", innerHTML: `partytown = ${renderedConfig}` },
        { hid: "partytown", innerHTML: partytownSnippet }
      );
    } else {
      nuxt.options.app.head.script = nuxt.options.app.head.script || [];
      nuxt.options.app.head.script.unshift(
        { children: `partytown = ${renderedConfig}` },
        { children: partytownSnippet }
      );
    }
    nuxt.options.nitro = nuxt.options.nitro || {};
    nuxt.options.nitro.publicAssets = nuxt.options.nitro.publicAssets || [];
    nuxt.options.nitro.publicAssets.push({
      baseURL: options.lib,
      dir: libDirPath()
    });
    if (isNuxt3())
      return;
    nuxt.hook("generate:done", async () => {
      await copyLibFiles(join(nuxt.options.generate.dir, options.lib));
    });
    nuxt.hook("render:setupMiddleware", async (app) => {
      const serveStatic = await import('serve-static').then(
        (r) => r.default || r
      );
      app.use(withoutTrailingSlash(withLeadingSlash(options.lib)), serveStatic(libDirPath()));
    });
  }
});

export { module as default };
